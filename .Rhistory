cats_allowed +
dogs_allowed +
smoking_allowed +
wheelchair_access +
electric_vehicle_charge +
comes_furnished +
laundry_options +
parking_options,
data = housing_cleaned)
selected_model = step(full_model, direction = "backward", trace=FALSE)
control_model_stats = c("Adj. R2" = summary(control_model)$adj.r.squared)
full_model_stats = c("Adj. R2" = summary(full_model)$adj.r.squared)
selected_model_stats = c("Adj. R2" = summary(selected_model)$adj.r.squared)
kable(
data.frame("Control Model" = control_model_stats,
"Full Model" = full_model_stats,
"Selected Model" = selected_model_stats),
format = "markdown",
col.names = c("Control Model", "Full Model", "Selected Model"))
library(dplyr)
library(ggplot2)
library(faraway)
library(knitr)
library(broom)
set.seed(20200805)
housing <- read.csv('housing.csv')
housing_cleaned <- housing %>%
filter(region == 'jacksonville',
state == 'fl') %>%
select(
-c(
id,
url,
region_url,
image_url,
lat,
long,
description)
) %>%
mutate(
type = as.factor(type),
region = as.factor(region),
state = as.factor(state),
cats_allowed = as.factor(cats_allowed),
dogs_allowed = as.factor(dogs_allowed),
smoking_allowed = as.factor(smoking_allowed),
wheelchair_access = as.factor(wheelchair_access),
electric_vehicle_charge = as.factor(electric_vehicle_charge),
comes_furnished = as.factor(comes_furnished),
laundry_options = as.factor(laundry_options),
parking_options = as.factor(parking_options))
install.packages(c("recommenderlab", "shiny", "shinydashboard", "shinyjs"))
install.packages(c("recommenderlab", "shiny", "shinydashboard", "shinyjs"))
shiny::runApp('cs598/proj4/MovieRecommender')
shiny::runApp('cs598/proj4/MovieRecommender')
shiny::runApp('cs598/proj4/MovieRecommender')
install.packages("htmltools")
shiny::runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
install.packages("ShinyRatingInput")
runApp('cs598/proj4/MovieRecommender')
install.packages("shiny")
shiny::runApp('cs598/proj4/MovieRecommender')
install.packages("shinydashboard")
shiny::runApp('cs598/proj4/MovieRecommender')
install.packages("devtools")
devtools::install_github("stefanwilhelm/ShinyRatingInput")
install.packages("devtools")
shiny::runApp('cs598/proj4/MovieRecommender')
install.packages("devtools")
devtools::install_github("stefanwilhelm/ShinyRatingInput")
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp()
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp()
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
knitr::opts_chunk$set(echo = TRUE)
movies = readLines(paste0(myurl, 'movies.dat?raw=true'))
library(dplyr)
library(ggplot2)
library(recommenderlab)
library(DT)
library(data.table)
library(reshape2)
movies = readLines(paste0(myurl, 'movies.dat?raw=true'))
myurl = "https://liangfgithub.github.io/MovieData/"
movies = readLines(paste0(myurl, 'movies.dat?raw=true'))
movies = strsplit(movies, split = "::", fixed = TRUE, useBytes = TRUE)
movies = matrix(unlist(movies), ncol = 3, byrow = TRUE)
movies = data.frame(movies, stringsAsFactors = FALSE)
colnames(movies) = c('MovieID', 'Title', 'Genres')
movies$MovieID = as.integer(movies$MovieID)
# convert accented characters
movies$Title[73]
movies$Title = iconv(movies$Title, "latin1", "UTF-8")
movies$Title[73]
# extract year
movies$Year = as.numeric(unlist(
lapply(movies$Title, function(x) substr(x, nchar(x)-4, nchar(x)-1))))
genres = as.data.frame(movies$Genres, stringsAsFactors=FALSE)
genres
tmp = as.data.frame(tstrsplit(genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
genres = as.data.frame(movies$Genres, stringsAsFactors=FALSE)
genres
tmp = as.data.frame(tstrsplit(genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
tmp
genres = as.data.frame(movies$Genres, stringsAsFactors=FALSE)
genres
tmp = as.list(tstrsplit(genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
tmp
genres = as.data.frame(movies$Genres, stringsAsFactors=FALSE)
genres
tmp = as.data.frame(tstrsplit(genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
as.list(tmp)
genres = as.data.frame(movies$Genres, stringsAsFactors=FALSE)
genres
tmp = as.data.frame(tstrsplit(genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
tmp
genres = as.data.frame(movies$Genres, stringsAsFactors=FALSE)
genres
tmp = as.data.frame(tstrsplit(genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
summary(tmp)
genres = as.data.frame(movies$Genres, stringsAsFactors=FALSE)
genres
tmp = as.data.frame(tstrsplit(genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
tstrsplit(genres[,1], '[|]', type.convert=TRUE)
?tstrsplit
genres = as.list(movies$Genres)
genres
genres = as.list(movies$Genres)
split(genres,'[|]')
genres = as.list(movies$Genres)
split(genres,'|')
genres = as.list(movies$Genres)
split("Animation|Children's|Comedy",'|')
genres = as.list(movies$Genres)
strsplit("Animation|Children's|Comedy",'|')
genres = as.list(movies$Genres)
strsplit("Animation|Children's|Comedy","|")
genres = as.list(movies$Genres)
strsplit("Animation|Children's|Comedy","[|]")
genres = as.list(movies$Genres)
strsplit(genres,"[|]")
genres = as.list(movies$Genres)
strsplit(genres,'[|]')
?apply
genres = as.list(movies$Genres)
strsplit(movies$Genres,'[|]'))
genres = as.list(movies$Genres)
strsplit(movies$Genres,'[|]')
?strsplit
genres = as.list(movies$Genres)
strsplit(movies$Genres,'[|]')[1]
genres = as.list(movies$Genres)
unlist(strsplit(movies$Genres,'[|]'))
genres = as.list(movies$Genres)
unique(unlist(strsplit(movies$Genres,'[|]')))
genres = as.list(movies$Genres)
unlist(strsplit(movies$Genres,'[|]'))
genres = as.list(movies$Genres)
unique(unlist(strsplit(movies$Genres,'[|]')))
genres = as.list(movies$Genres)
sort(unique(unlist(strsplit(movies$Genres,'[|]'))))
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
tmp = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID')
summary(tmp$ratings_per_movie)
tmp = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID')
tmp = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID')
summary(tmp$ratings_per_movie)
tmp = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID')
tmp %>%
filter(ratings_per_movie > 2000) %>%
arrange(desc = ratings_per_movie) %>%
select(c("Title", "ratings_per_movie")) %>%
print(n = 31)
tmp = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID')
tmp %>%
filter(ratings_per_movie > 2000) %>%
arrange(desc = ratings_per_movie) %>%
select(c("Title", "ratings_per_movie")) %>%
print(n = 31)
tmp[1:5,]
tmp = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID')
tmp = tmp %>%
filter(ratings_per_movie > 2000) %>%
arrange(desc = ratings_per_movie) %>%
select(c("Title", "ratings_per_movie")) %>%
print(n = 31)
tmp[1:5,]
genre = "Action"
moviesByGenre = movies[movies$Genres == genre]
genre = "Action"
moviesByGenre = movies[movies$Genres == genre,]
genre = "Action"
moviesByGenre = movies[movies$Genres == genre,]
moviesByGenre
genre = "Action"
moviesByGenre = movies[str_contains(movies$Genres,genre),]
genre = "Action"
moviesByGenre = movies[grepl(movies$Genres,genre),]
moviesByGenre
genre = "Action"
moviesByGenre = movies %>%
filter(grepl(Genres,genre) == TRUE)
moviesByGenre
genre = "Action"
moviesByGenre = movies %>%
filter(grepl(Genres,genre) == TRUE)
moviesByGenre
tmp = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID')
tmp = tmp %>%
filter(ratings_per_movie > 2000) %>%
arrange(desc = ratings_per_movie) %>%
select(c("Title", "ratings_per_movie"))
tmp[1:5,]
tmp = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID')
tmp = tmp %>%
filter(ratings_per_movie > 2000) %>%
arrange(desc = ratings_per_movie) %>%
select(c("Title", "ratings_per_movie"))
sort(tmp, decreasing = TRUE)
tmp = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID')
tmp = tmp %>%
filter(ratings_per_movie > 2000) %>%
arrange(desc = ratings_per_movie) %>%
select(c("Title", "ratings_per_movie"))
sort(tmp$ratings_per_movie, decreasing = TRUE)
genre = "Action"
moviesByGenre = movies %>%
filter(grepl(movies$Genres,genre) == TRUE)
moviesByGenre
genre = "Action"
moviesByGenre = movies[ which(movies$Genres,genre) == TRUE) )]
genre = "Action"
moviesByGenre = movies[ which(movies$Genres,genre) == TRUE) ]
genre = "Action"
moviesByGenre = movies[ which(movies$Genres,genre) == TRUE]
genre = "Action"
moviesByGenre = movies[ which(grepl(movies$Genres,genre) == TRUE)]
moviesByGenre
genre = "Action"
moviesByGenre = movies[ genre %in% movies$Genres, ]
moviesByGenre
genre = "Action"
moviesByGenre = movies[ genre %in% Genres, ]
genre = "Action"
moviesByGenre =  movies %>%
filter( genre %in% Genres)
moviesByGenre
genre = "Action"
moviesByGenre =  movies %>%
filter( genre %in% strsplit(Genres,'[|]'))
moviesByGenre
genre = "Action"
moviesByGenre =  movies %>%
filter( grepl(genre,Genres))
moviesByGenre
genre = "Crime"
moviesByGenre =  movies %>%
filter( grepl(genre,Genres))
moviesByGenre
tmp = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(moviesByGenre, by = 'MovieID')
tmp = tmp %>%
filter(ratings_per_movie > 2000) %>%
arrange(desc = ratings_per_movie) %>%
select(c("Title", "ratings_per_movie"))  %>%
arrange(desc(ratings_per_movie))
tmp = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(moviesByGenre, by = 'MovieID')
tmp = tmp %>%
filter(ratings_per_movie > 2000) %>%
arrange(desc = ratings_per_movie) %>%
select(c("Title", "ratings_per_movie"))  %>%
arrange(desc(ratings_per_movie))
tmp
tmp = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(moviesByGenre, by = 'MovieID')
tmp = tmp %>%
filter(ratings_per_movie > 2000) %>%
arrange(desc = ratings_per_movie) %>%
select(c("Title", "ratings_per_movie"))
tmp
tmp = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(moviesByGenre, by = 'MovieID')
tmp = tmp %>%
arrange(desc = ratings_per_movie) %>%
select(c("Title", "ratings_per_movie"))
tmp
tmp = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(moviesByGenre, by = 'MovieID')
tmp = tmp %>%
arrange(desc(ratings_per_movie)) %>%
select(c("Title", "ratings_per_movie"))
tmp
tmp = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(moviesByGenre, by = 'MovieID')
tmp = tmp %>%
arrange(desc(ratings_per_movie)) %>%
select(c("Title", "ratings_per_movie"))
tmp[1:5,]
genre = "Action"
moviesByGenre =  movies %>%
filter( grepl(genre,Genres))
moviesByGenre
tmp = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(moviesByGenre, by = 'MovieID')
tmp = tmp %>%
arrange(desc(ratings_per_movie)) %>%
select(c("Title", "ratings_per_movie"))
tmp[1:5,]
ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(),
ave_ratings = round(mean(Rating), dig=3)) %>%
inner_join(movies, by = 'MovieID') %>%
filter(ratings_per_movie > 1000) %>%
top_n(10, ave_ratings) %>%
select('Title', 'ave_ratings') %>%
arrange(desc(-ave_ratings))
ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(),
ave_ratings = round(mean(Rating), dig=3)) %>%
inner_join(movies, by = 'MovieID') %>%
filter(ratings_per_movie > 1000) %>%
top_n(10, ave_ratings) %>%
select('Title', 'ave_ratings') %>%
arrange(desc(ave_ratings))
ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(),
ave_ratings = round(mean(Rating), dig=3)) %>%
inner_join(moviesByGenre, by = 'MovieID') %>%
filter(ratings_per_movie > 1000) %>%
top_n(10, ave_ratings) %>%
select('Title', 'ave_ratings') %>%
arrange(desc(ave_ratings))
tmp = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(moviesByGenre, by = 'MovieID')
tmp = tmp %>%
top_n(10, ratings_per_movie) %>%
arrange(desc(ratings_per_movie)) %>%
select(c("Title", "ratings_per_movie"))
ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(),
ave_ratings = round(mean(Rating), dig=3)) %>%
inner_join(moviesByGenre, by = 'MovieID') %>%
filter(ratings_per_movie > 1000) %>%
top_n(10, ave_ratings) %>%
select('Title', 'ave_ratings') %>%
arrange(desc(ave_ratings))
tmp = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(moviesByGenre, by = 'MovieID')
tmp = tmp %>%
top_n(10, ratings_per_movie) %>%
arrange(desc(ratings_per_movie)) %>%
select(c("Title", "ratings_per_movie"))
tmp[1:5,]
tmp = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(moviesByGenre, by = 'MovieID')
tmp %>%
top_n(10, ratings_per_movie) %>%
arrange(desc(ratings_per_movie)) %>%
select(c("Title", "ratings_per_movie"))
runApp('cs598/proj4/MovieRecommender')
user_predicted_ids = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(),
ave_ratings = round(mean(Rating), dig=3)) %>%
inner_join(moviesByGenre, by = 'MovieID') %>%
filter(ratings_per_movie > 1000) %>%
top_n(10, ave_ratings) %>%
arrange(desc(ave_ratings)) %>%
select('MovieID')
user_predicted_ids = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(),
ave_ratings = round(mean(Rating), dig=3)) %>%
inner_join(moviesByGenre, by = 'MovieID') %>%
filter(ratings_per_movie > 1000) %>%
top_n(10, ave_ratings) %>%
arrange(desc(ave_ratings)) %>%
select('MovieID')
user_predicted_ids
runApp('cs598/proj4/MovieRecommender')
genre = "Action"
moviesByGenre =  movies %>%
filter( grepl(genre,Genres))
moviesByGenre
ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(),
ave_ratings = round(mean(Rating), dig=3)) %>%
inner_join(moviesByGenre, by = 'MovieID') %>%
filter(ratings_per_movie > 1000) %>%
top_n(10, ave_ratings) %>%
select('Title', 'ave_ratings') %>%
arrange(desc(ave_ratings))
ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(),
ave_ratings = round(mean(Rating), dig=3)) %>%
inner_join(moviesByGenre, by = 'MovieID') %>%
filter(ratings_per_movie > 1000) %>%
top_n(10, ave_ratings) %>%
arrange(desc(ave_ratings)) %>%
select('MovieID','Title', 'ave_ratings')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
runApp('cs598/proj4/MovieRecommender')
